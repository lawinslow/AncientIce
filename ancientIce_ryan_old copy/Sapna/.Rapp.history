runCause <- function(data, var1N, var2N, pred, E=3, nStart=20, libSize=NULL, grabLakeDate=FALSE, pp2=FALSE, dNew=FALSE, plotCCM=FALSE){#
	var1 <- data[,var1N]#
	var2 <- data[,var2N]#
	if(pp2){#
		p2(var1, var2, mfrow=c(2,2))#
		plot(var1, var2, type="l")#
		plot(embed(var1,2), type="l")#
		plot(embed(var2,2), type="l")	#
	}#
	ed <- (E*2)+1#
	if(is.null(libSize)){#
		pickL <- c(ed, diff(pred))#
	}else{#
		pickL <- libSize#
	}#
	Ls <- pickL[1]:pickL[2]#
	var1_xmap_var2 <- data.frame()#
	var2_xmap_var1 <- data.frame()#
	for(lib_size in pickL[1]:pickL[2])#
	{#
		pO <- pred[1]:(pred[2]-lib_size)#
		if(length(pO)>1){#
			start_lib_20 <- sample(pO, min(nStart, length(pO)))#
		}else{#
			start_lib_20 <- pO#
		}#
		for(start_lib in (start_lib_20))#
	  {#
	     lib <- c(start_lib, start_lib+lib_size-1)#
	     results <- cross_mapping(var1, var2, lib, pred, E, tau = 1, b = E+1)#
	     var1_xmap_var2 <- rbind(var1_xmap_var2, data.frame(L = lib_size, rho = results$stats$rho))#
#
	     results <- cross_mapping(var2, var1, lib, pred, E, tau = 1, b = E+1)#
	     var2_xmap_var1 <- rbind(var2_xmap_var1, data.frame(L = lib_size, rho = results$stats$rho))     #
	  }#
	}#
	# compute mean rhos at each L#
	var1_xmap_var2$L <- as.factor(var1_xmap_var2$L)#
	var2_xmap_var1$L <- as.factor(var2_xmap_var1$L)#
	v1xv2 <- pmax(0,do.call(rbind, lapply(split(var1_xmap_var2, var1_xmap_var2$L), function(x){median(x$rho)})))#
	v2xv1 <- pmax(0,do.call(rbind, lapply(split(var2_xmap_var1, var2_xmap_var1$L), function(x){median(x$rho)})))#
#
	slope_1x2_coeff <- summary(lm(v1xv2~log(Ls)))$coeff#
	slope_1x2 <- round(slope_1x2_coeff[2],1)#
	slope_1x2_se <- round(slope_1x2_coeff[4],1)#
	slope_2x1_coeff <- summary(lm(v2xv1~log(Ls)))$coeff#
	slope_2x1 <- round(slope_2x1_coeff[2],1)#
	slope_2x1_se <- round(slope_2x1_coeff[4],1)#
#
	# produce plot (Figure 5B from Sugihara et al. 2012)#
	if(dNew){#
		dev.new(height=3.5, width=3.5)#
		par(mar=c(2.5,2.5,0.5,0.5), family="Times", ps=10, mgp=c(1.25,0.5,0), tcl=-0.4)#
	}#
	if(plotCCM){#
		plot(Ls, v1xv2, type = "l", col = "slateblue1", lwd = 2, xlim = pickL, ylim=range(c(v1xv2,v2xv1)*c(1,1.4), na.rm=TRUE), xlab = "Library size", ylab = expression(rho))#
		# plot(Ls, v1xv2, type = "l", col = "slateblue1", lwd = 2,  xlim = pickL, ylim=c(0, 1.1), xlab = "Library size", ylab = expression(rho))#
		lines(Ls, v2xv1, col = "forestgreen", lwd = 2)#
		l1x2 <- bquote(.(var1N)%<=%hat(.(var2N))~~(slope~'='~.(slope_1x2)%+-%.(slope_1x2_se)))#
		l2x1 <- bquote(.(var2N)%<=%hat(.(var1N))~~(slope~'='~.(slope_2x1)%+-%.(slope_2x1_se)))#
		legend("topleft", legend = c(as.expression(l1x2), as.expression(l2x1)) , lty = 1, lwd = 2, col = c("slateblue1", "forestgreen"), y.intersp=0.85, cex=0.9)#
		if(grabLakeDate){ # Not finished, will add another legend specifying the lake and the #
			lakeN <- data[,"Lake"]#
			sdy <- paste(data[pred[1],c("DoY")], "of 2013")#
			edy <- paste(data[pred[2],c("DoY")], "of 2013")#
		}#
	}#
	# return the effect of 1 on 2, then 2 on 1 (effect of 1 on 2 is from 2xmap1)	#
	return(c(slope_2x1, slope_1x2))#
}#
date2doy <- function(x){#
	stopifnot(any(grepl("^POSIX",class(x))))#
	day <- as.numeric(format(x, "%j"))#
	pat <- quote("([0-9]{2}:){2}[0-9]{2}")#
	midnight <- gsub(pat, "00:00:00", x)#
	frac <- as.numeric(difftime(x, midnight, units="days"))#
	day+frac#
}#
#
p2 <- function(x,y, ...){#
	dev.new()#
	par(mar=c(2.5,2.5,0.5,3), mgp=c(1.5, 0.5, 0), tcl=-0.4, ps=10, family="Times", ...)#
	plot(x, type="l")#
	par(new=TRUE)#
	plot(y, type="l", xaxt="n", yaxt="n", xlab="", ylab="", col="blue")#
	axis(side=4)#
}#
# =================================================================#
# = Luke: cross_mapping mostly organizes data; it doesn't do much =#
# =================================================================#
cross_mapping <- function(data, target0, lib, pred, E, tau = 1, b = E+1)#
{#
  # do cross mapping using simplex projection#
  # data = time series#
  # lib = matrix (n x 2) using n sequences of data for library#
  # pred = matrix (n x 2) using n sequences of data to predict from#
  # E = number of dimensions for the attractor reconstruction#
  # tau = time lag for the lagged-vector construction#
  # b = number of nearest neighbors to use for prediction#
#
	# ===========================#
	# = Ryan Replacement: Start =#
	# ===========================#
	#This entire function can be replaced with the follow lines, and run ~38% faster:#
	# NOTE: introduces mismatch between lib_indices and pred_indices; subtracing lFix from lib_indices fixes this; then need to truncate first lFix of target#
	# NOTE (cont'd): this can be fixed in later functions, or by passing a different "target" to simplex_projection()#
	n <- NROW(data)#
	lib <- matrix(lib, ncol = 2)#
	pred <- matrix(pred, ncol = 2)#
	lFix <- (E-1)*tau#
	vectors <- embed(data, E)#
	target <- target0[-(1:lFix)]#
	n1 <- 1:n#
	lib_indices <- ((n1)>=(lib[1,1]+lFix) & (n1)<=(lib[1,2]))[-(1:lFix)]#
	pred_indices <- ((n1)>=(pred[1,1]+lFix) & (n1)<=(pred[1,2]))[-(1:lFix)]#
	# =========================#
	# = Ryan Replacement: End =#
	# =========================#
	# ==============#
	# = Ryan Summary: =#
	# ==============#
	# This function simply creates 2 indices and 1 matrix. #
	# The indices are basically (1:n)%in%pred[1]:pred[2], but accounts for the lags.#
	# The matrix contains the lagged versions of X.#
  return(simplex_projection(vectors, target, lib_indices, pred_indices, b))#
}#
# ==================================================================#
# = Luke: I wrote this function, it's called by simplex_projection =#
# ==================================================================#
#Although I wrote this,it's basically just copied from their old code that was within a for() loop#
neighWeigh <- function(dists, num_neighbors){#
	min_d <- min(dists, na.rm=TRUE)#
	if(min_d != 0){ # not perfect match#
     	wei <- exp(-dists/min_d)#
     	wei[wei < 0.000001] <- 0.000001#
	}else{ # else, if it is a perfect match#
     	wei <- rep.int(0.000001, times = num_neighbors)#
     	wei[dists == 0] <- 1#
	}#
	return(wei/sum(wei, na.rm=TRUE))#
}#
#
# =================================================#
# = Luke: simplex_projection is the slow function =#
# =================================================#
simplex_projection <- function(vectors, target, lib_indices, pred_indices, num_neighbors)#
{#
  # do simplex projection#
  # vectors = reconstructed state-space (each row is a separate vector/state)#
  # target = time series to be used as the target (should line up with vectors)#
  # lib_indices = vector of T/F values (which states to include when searching for neighbors)#
  # pred_indices = vector of T/F values (which states to predict from)#
  # num_neighbors = number of neighbors to use for simplex projection#
  # setup output#
	preds <- rep.int(NaN, times = length(target))#
	empty1 <- matrix(NA, nrow=sum(pred_indices), ncol=num_neighbors)#
	empty2 <- empty1#
	lp <- lib_indices[pred_indices]#
	addBack <- min(which(lp))-1 # when getting the indices of the nearest neighbors, need to account for get.knnx() not seeing the full matrix, as it missing the indices removed by lp; i.e., the indices from get.knnx() are off my min(which(lp))-1 relative to the original (full length(target) x length(target)) matrix#
  # make predictions#
	#Should be possible to do this with dist()#
	# ================================#
	# = Slow step below? (distance2) =#
	# ================================#
	# =======#
	# = OLD =#
	# # =======#
	# # distance2 <- as.matrix(dist(vectors[pred_indices,])) # each column contains the distances between all pairs of rows in vectors[lib_indices]#
	# distance2 <- rdist(vectors[pred_indices,])#
	# # distance2[upper.tri(distance2, diag=TRUE)] <- NA#
	# diag(distance2) <- NA # the diagonals are always 0, because each row maps onto itself perfect (distance = 0), so replace w/ NA so it doesn't get ranked later#
	# distance2[!lib_indices[pred_indices], ] <- NA # think of each column as the index for the prediction, and each row as a reference to the library. When finding the distances, we want to be able to select between all combinations of prediciton x library, which means have all the columns, but only some of the rows. Later, each column will have 4 non-zero values, representing the 4-closest time steps for the column that we want to predict; our search for the closest 4 is limited to within the library, i.e., a subset of the rows. (the library is a subset of prediction)#
	# neighbors2 <- apply(distance2, 2, order)[1:num_neighbors,] # get the rank (order) for the distances, applied per column #
	# #(neighbors2 ultimately gives the 4 closest rows in vectors[lib_indices,] for each row in vectors[lib_indices,])#
	# ===========#
	# = END OLD =#
	# ===========#
	# =======#
	# = NEW =#
	# =======#
	data2 <- vectors[lib_indices,]#
	query2 <- vectors[pred_indices,]#
	knn <- get.knnx(data2, query2, k=num_neighbors+1, algorithm="brute")#
	# knn2 <- function(x, y)#
# f0 <- function()	get.knnx(data2, query2, k=num_neighbors+1, algorithm="cover_tree")#
# f1 <- function()	get.knnx(data2, query2, k=num_neighbors+1, algorithm="kd_tree")#
# f2 <- function()	get.knnx(data2, query2, k=num_neighbors+1, algorithm="CR")#
# f3 <- function()	get.knnx(data2, query2, k=num_neighbors+1, algorithm="brute")#
# microbenchmark(f0(), f1(), f2(), f3())#
	empty1[lp,] <- knn$nn.dist[lp, 2:(num_neighbors+1)]#
	empty1[!lp,] <- knn$nn.dist[!lp, 1:num_neighbors]#
	distance3 <- t(empty1)#
	empty2[lp,] <- knn$nn.index[lp, 2:(num_neighbors+1)]#
	empty2[!lp,] <- knn$nn.index[!lp, 1:num_neighbors] #
	neighbors2 <- t(empty2)#
	# ===========#
	# = END NEW =#
	# ===========#
	neighbors3 <- matrix(c(neighbors2+addBack, rep(1:ncol(neighbors2), each=num_neighbors)), ncol=2) # neighbors2 gives the indices, but not in a format convenient for subsetting (neighbors3 mimics the format of which(... arr.ind=TRUE))#
	# distance3 <- matrix(distance2[neighbors3], nrow=num_neighbors) # given the indices, actually extract the distances (neighbors has the locations of the nearest neighbors, distances has the values of the nearest neighbors)#
	weights2 <- apply(distance3, 2, neighWeigh, num_neighbors=num_neighbors)#
	# total_weight2 <- colSums(weights2)#
	weigh_mat <- matrix(rep.int(0, sum(pred_indices)^2), ncol=sum(pred_indices)) #function to contain the weights, which are computed from the distance matrix#
	weigh_mat[neighbors3] <- weights2#
#
	# ============================#
	# = Slow step below? (preds) =#
	# ============================#
	preds[pred_indices] <- (target[pred_indices]%*%weigh_mat)[,]#
	# weights2%*%target[lib_indices]#
  # return output & stats#
  return(list(preds = preds, stats = compute_stats(target[pred_indices], preds[pred_indices])))#
}#
#
# ===================================================================================#
# = Luke: I haven't edited compute_stats, but I don't think this is called too much =#
# ===================================================================================#
compute_stats <- function(obs, preds)#
{#
  # computes performance metrics for how well predictions match observations#
  # obs = vector of observations#
  # pred = vector of prediction#
  N = sum(is.finite(obs) & is.finite(preds))#
  rho = cor(obs, preds, use = "pairwise.complete.obs")#
  mae = mean(abs(obs-preds), na.rm = TRUE)#
  rmse = sqrt(mean((obs-preds)^2, na.rm = TRUE))#
  return(data.frame(N = N, rho = rho, mae = mae, rmse = rmse))#
}
dim(Torn.1803)
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=5:206)
library("FNN")
library("plyr")
library("fields")
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=5:206)
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=7:206)
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=c(1,206))
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=c(1,206), devNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=c(1,206), dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "Mean.sunspots", pred=c(1,206), dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(1,206), dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "MAMTornio", pred=c(1,206), dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "MAMTornio", pred=c(1,83), dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=c(1,83), dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=c(84, 206), dNew=TRUE, plotCCM=TRUE)
breakpoints(Torn.1803[,2] ~ 1)
?breakpoints
Torn.1803[,83]
Torn.1803[83,2]
Torn.1803[83,1]
runCause(Torn.1803, "iceoff_julian", "MAMTornio", pred=c(1, 83), dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "MAMTornio", pred=c(84, 206), dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "MAMTornio", pred=c(84, 206), libSize=c(7, 80), nStart=80, dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=c(84, 206), libSize=c(7, 80), nStart=80, dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "NAO_DJFM", pred=c(84, 206), nStart=80, dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(84, 206), nStart=80, dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(1, 83), nStart=80, dNew=TRUE, plotCCM=TRUE)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(1, 83), nStart=80, dNew=TRUE, plotCCM=TRUE, E=4)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(1, 83), nStart=80, dNew=TRUE, plotCCM=TRUE, E=5)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(1, 83), nStart=80, dNew=TRUE, plotCCM=TRUE, E=10)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(1, 83), nStart=80, dNew=TRUE, plotCCM=TRUE, E=20)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(1, 83), nStart=80, dNew=TRUE, plotCCM=TRUE, E=10)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(84, 206), nStart=80, dNew=TRUE, plotCCM=TRUE, E=10)
runCause(Torn.1803, "iceoff_julian", "CO2", pred=c(84, 206), nStart=80, dNew=TRUE, plotCCM=TRUE, E=5)
spectrum(Torn.1803[,2])
?spectrum
spectrum(Torn.1803[,2], method="ar")
acf(Torn.1803[,2])
ar(Torn.1803[,2])
pacf(Torn.1803[,2])
library(zoo)
?rollapplyr
?spetrum
?spectrum
spectrum(Torn.1803[,2])
spectrum(Torn.1803[,2])
?rollapplyr
rollapplyr(Torn.1803[,2], by=1, width=50, FUN=spectrum)
rollapplyr(Torn.1803[,2], by=1, width=50, FUN=spectrum)
rollapplyr(Torn.1803[,2], by=1, width=50, FUN=spectrum)
spec2 <- function(x){spectrum(x)$spec}
rollapplyr(Torn.1803[,2], by=1, width=50, FUN=spec2)
?na.exclude
spec2 <- function(x){spectrum(x, plot=FALSE, na.action=na.omit)$spec}
rollapplyr(Torn.1803[,2], by=1, width=50, FUN=spec2)
?image.plot
x <- Torn.1803[,2]
wsize <- 50
spec2 <- function(x){spectrum(x, plot=FALSE, na.action=na.omit)$spec}
specres <- t(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))
image.plot(specres)
specres
?image
length(x)
dim(specres)
image.plot(x=length(x)-(wsize-1), y=wsize/2, z=specres)
image.plot(x=1:(length(x)-(wsize-1)), y=wsize/2, z=specres)
(length(x)-(wsize-1)
)
wsize/2
image.plot(x=1:(length(x)-(wsize-1)), y=1:(wsize/2), z=specres)
dim(specres)
length(1:(length(x)-(wsize-1)))
length(1:(wsize/2))
x <- y <- seq(-4*pi, 4*pi, len = 27)#
r <- sqrt(outer(x^2, y^2, "+"))
length(x)
dim(r)
dim(specres)
specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)
specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)
x <- Torn.1803[,2]
wsize <- 50
spec2 <- function(x){spectrum(x, plot=FALSE, na.action=na.omit)$spec}
specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)
image.plot(x=1:(length(x)-(wsize-1)), y=1:(wsize/2), z=specres)
spec2 <- function(x){spectrum(x, plot=FALSE, na.action=na.omit, method="ar")$spec}
specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)
?spectrum
spectrum(x, plot=FALSE, na.action=na.omit, method="ar")
str(spectrum(x, plot=FALSE, na.action=na.omit, method="ar"))
spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec
if(is.null(nfreq)){nfreq=500}
nfreq=NULL
if(is.null(nfreq)){nfreq=500}
spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec
spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}
specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)
spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}
specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)
specres
image.plot(x=1:(length(x)-(wsize-1)), y=1:nused, z=specres)
nused
nused <- ifelse(method=="ar", nfreq, wsize/2)
method="ar"
nused <- ifelse(method=="ar", nfreq, wsize/2)
image.plot(x=1:(length(x)-(wsize-1)), y=1:nused, z=specres)
nfreq=100
spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}
nused <- ifelse(method=="ar", nfreq, wsize/2)
specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)
image.plot(x=1:(length(x)-(wsize-1)), y=1:nused, z=specres)
wsize <- 100
if(is.null(nfreq)){nfreq=100}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)#
	image.plot(x=1:(length(x)-(wsize-1)), y=1:nused, z=specres)
(wsize-1):length(x)
days <- Torn.1803[(wsize-1):length(x),1]
days
years <- Torn.1803[(wsize-1):length(x),1]
gYrs <- Torn.1803[(wsize-1):length(x),1]
gFreq <- seq(1, wsize/2, nused)
gFreq
nused
gFreq <- seq(1, wsize/2, lenght.out=nused)
gFreq <- seq(1, wsize/2, length.out=nused)
gFreq
gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq
)
gFreq <- seq(0, 0.5, length.out=nused) #seq(1, wsize/2, length.out=nused)
gFreq
image.plot(x=gYrs, y=gFreq, z=specres)
wsize <- 200
spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused) #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 50#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused) #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
nfreq=NULL
x <- Torn.1803[,2]#
	wsize <- 50#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused) #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
wsize <- 100
spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused) #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0.5, 0, length.out=nused) #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
wsize <- 75
spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
wsize <- 30
nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- rollapplyr(data=x, width=wsize, by=1, FUN=spec2)#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))
gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
wsize <- 150
nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 150#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="prgram"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="prgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)
spec2 <- function(x, method="pgram"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)
gYrs
gFreq
image.plot(x=gYrs, y=gFreq, z=specres)
specres
dim(specres)
gYrs
length(gYrs)
nused
nused <- ifelse(method=="ar", nfreq, wsize/2)
nused
method
method="pgram"
nused <- ifelse(method=="ar", nfreq, wsize/2)
nused
specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))
gYrs <- Torn.1803[(wsize-1):length(x),1]
gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)
length(gFreq)
image.plot(x=gYrs, y=gFreq, z=specres)
wsize <- 100
spec2 <- function(x, method="pgram"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}
nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 100#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
method="ar"
x <- Torn.1803[,2]#
	wsize <- 100#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 50#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 75#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 20#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 150#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
dev.new()
plot( Torn.1803[,1:2], type="l")
x <- Torn.1803[,2]#
	wsize <- 80#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 60#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 75#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 100#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
x <- Torn.1803[,2]#
	wsize <- 50#
	method="ar"#
	nfreq=NULL#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	specres <- log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))#
	gYrs <- Torn.1803[(wsize-1):length(x),1]#
	gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
	image.plot(x=gYrs, y=gFreq, z=specres)
dev.new()
plot( Torn.1803[,1:2], type="l")
par(new=TRUE); plot( Torn.1803[,1:2], type="l")
par(new=TRUE); plot( Torn.1803[,1:2], type="l")
image.plot(x=gYrs, y=gFreq, z=specres)#
	lines( Torn.1803[,1:2], type="l")
?dev.new
?image.plot
plot( Torn.1803[,1:2], type="l")
image.plot(x=gYrs, y=gFreq, z=specres, add=TRUE)
lines( Torn.1803[,1:2], type="l")
image(x=gYrs, y=gFreq, z=specres)
?image
image(x=gYrs, y=gFreq, z=specres, col=tim.colors())
lines( Torn.1803[,1:2], type="l")
gYrs
lines(Torn.1803[,1:2], type="l")
par(mfcol=c(2,1))#
plot(seq_len(1000)*0.01, sin(2*pi*seq_len(1000)*0.01), type="l", xaxs="i")#
image(seq_len(1000)*0.01,seq_len(100)*0.1,array(runif(1000000),dim=c(1000,100)),#
    xlab="Time", ylab="Frequency", main="Spectrogram")
?par
image(x=gYrs, y=gFreq, z=specres, col=tim.colors())#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l")
image(x=gYrs, y=gFreq, z=specres, col=tim.colors())
abline(v=1950)
par(new=TRUE)
plot(Torn.1803[(wsize-1):length(x),1:2], type="l")
abline(v=1950, col="blue")
?lines
range(gYrs)
?image
image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs))#
	abline(v=1950)#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs))#
	abline(v=1950, col="blue")
plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i")
image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs))#
	abline(v=1950)#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i")#
	abline(v=1950, col="blue")
image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs))#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i")
image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs))#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n")#
	axis(side=4)
par(mar=c(3,3,0.5,3), ps=10, family="Times", tcl=-0.35, mgp=c(1.5, 0.5, 0))#
	image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs))#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n")#
	axis(side=4)
par(mar=c(3,3,0.5,3), ps=10, family="Times", tcl=-0.35, mgp=c(1.5, 0.35, 0))#
	image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs))#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n", xlab="", ylab="")#
	axis(side=4)
dev.new(height=3.5, width=5)#
	par(mar=c(3,3,0.5,3), ps=10, family="Times", tcl=-0.35, mgp=c(1.5, 0.35, 0))#
	image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs))#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n", xlab="", ylab="")#
	axis(side=4)
abline(v=1986, lty="dashed", lwd=2)
dev.new(height=3.5, width=5)#
	par(mar=c(3,3,0.5,3), ps=10, family="Times", tcl=-0.35, mgp=c(1.5, 0.35, 0))#
	image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs))#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n", xlab="", ylab="")#
	axis(side=4)#
	abline(v=1886, lty="dashed", lwd=2)
mtext("Tornio break-up day", side=4, line=1.5)
par(mar=c(3,3,0.5,3), ps=10, family="Times", tcl=-0.35, mgp=c(1.5, 0.35, 0))#
	image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs), xlab="Year", ylab="Cycle period (yrs)")#
	par(new=TRUE)#
	plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n", xlab="", ylab="")#
	axis(side=4)#
	abline(v=1886, lty="dashed", lwd=2)#
	mtext("Tornio break-up day", side=4, line=1.5)
rm(list=ls())
# x <- Torn.1803[,2]#
wsize <- 50#
method="ar"#
#
rollSpec <- function(x=Torn.1803[,2], wsize=wsize, method=method, nfreq=NULL){#
	library(zoo)#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2)		#
}
rollSpec <- function(x=Torn.1803[,2], wsize=wsize, method=method, nfreq=NULL){#
	library(zoo)#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2)		#
}
rollSpec <- function(x=Torn.1803[,2], wsize=wsize, method=method, nfreq=NULL){#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))		#
}
specres <- rollSpec(Torn.1803[,2])
# x <- Torn.1803[,2]#
wsize <- 50#
method="ar"#
library(zoo)#
rollSpec <- function(x=Torn.1803[,2], wsize=wsize, method="ar", nfreq=NULL){#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, method="ar"){#
		if(method=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(method=="ar", nfreq, wsize/2)#
	log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))		#
}#
#
specres <- rollSpec(Torn.1803[,2])
Torn.1803 = read.table("Torn1803.txt", header=TRUE, sep="\t")
specres <- rollSpec(Torn.1803[,2])
rollSpec <- function(x=Torn.1803[,2], wsize=wsize, specM="ar", nfreq=NULL){#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x, specM="ar"){#
		if(specM=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
	nused <- ifelse(specM=="ar", nfreq, wsize/2)#
	log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))		#
}#
#
specres <- rollSpec(Torn.1803[,2])
rollSpec <- function(x=Torn.1803[,2], wsize=wsize, specM="ar", nfreq=NULL){#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x){#
		if(specM=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
#
	nused <- ifelse(specM=="ar", nfreq, wsize/2)#
	log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))		#
}#
#
specres <- rollSpec(Torn.1803[,2])
rollSpec <- function(x=Torn.1803[,2], wsize=50, specM="ar", nfreq=NULL){#
	if(is.null(nfreq)){nfreq=200}#
	spec2 <- function(x){#
		if(specM=="ar"){#
			c(spectrum(x, plot=FALSE, na.action=na.omit, method="ar", n.freq=nfreq)$spec)#
		}else{#
			spectrum(x, plot=FALSE, na.action=na.omit, method="pgram")$spec#
		}#
	}#
#
	nused <- ifelse(specM=="ar", nfreq, wsize/2)#
	log(rollapplyr(data=x, width=wsize, by=1, FUN=spec2))		#
}#
#
specres <- rollSpec(Torn.1803[,2], wsize=50)
gYrs <- Torn.1803[(wsize-1):length(x),1]#
gFreq <- seq(0, 0.5, length.out=nused)*wsize #seq(1, wsize/2, length.out=nused)#
dev.new(height=3.5, width=5)#
par(mar=c(3,3,0.5,3), ps=10, family="Times", tcl=-0.35, mgp=c(1.5, 0.35, 0))#
image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs), xlab="Year", ylab="Cycle period (yrs)")#
par(new=TRUE)#
plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n", xlab="", ylab="")#
axis(side=4)#
abline(v=1886, lty="dashed", lwd=2)#
mtext("Tornio break-up day", side=4, line=1.5)
nfreq
specM
nused <- ifelse(meth2use=="ar", freq2use, w2use/2)
w2use <- 50#
meth2use <- "ar"#
freq2use <- 200
nused <- ifelse(meth2use=="ar", freq2use, w2use/2)
gYrs <- Torn.1803[(wsize-1):length(x),1]
gYrs <- Torn.1803[(wsize-1):length(Torn.1803[,2]),1]
gFreq <- seq(0, 0.5, length.out=nused)*w2use #seq(1, wsize/2, length.out=nused)
dev.new(height=3.5, width=5)#
par(mar=c(3,3,0.5,3), ps=10, family="Times", tcl=-0.35, mgp=c(1.5, 0.35, 0))#
image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs), xlab="Year", ylab="Cycle period (yrs)")#
par(new=TRUE)#
plot(Torn.1803[(wsize-1):length(x),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n", xlab="", ylab="")#
axis(side=4)#
abline(v=1886, lty="dashed", lwd=2)#
mtext("Tornio break-up day", side=4, line=1.5)
plot(Torn.1803[(w2use-1):length(Torn.1803[,2]),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n", xlab="", ylab="")#
axis(side=4)#
abline(v=1886, lty="dashed", lwd=2)#
mtext("Tornio break-up day", side=4, line=1.5)
dev.new(height=3.5, width=5)#
par(mar=c(3,3,0.5,3), ps=10, family="Times", tcl=-0.35, mgp=c(1.5, 0.35, 0))#
image(x=gYrs, y=gFreq, z=specres, col=tim.colors(), xlim=range(gYrs), xlab="Year", ylab="Cycle period (yrs)")#
par(new=TRUE)#
plot(Torn.1803[(w2use-1):length(Torn.1803[,2]),1:2], type="l", xlim=range(gYrs), xaxs="i", xaxt="n", yaxt="n", xlab="", ylab="")#
axis(side=4)#
abline(v=1886, lty="dashed", lwd=2)#
mtext("Tornio break-up day", side=4, line=1.5)
